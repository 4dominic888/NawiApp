// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    student,
    registerBook,
    studentRegisterBook,
    hiddenStudentTable,
    studentViewDAOVersion,
    hiddenStudentViewDAOVersion,
    registerBookViewDAOVersion,
    name,
    age,
    timestamp,
    createdAt,
    type,
  ];
  late final Shape0 student = Shape0(
      source: i0.VersionedTable(
        entityName: 'student',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 registerBook = Shape1(
      source: i0.VersionedTable(
        entityName: 'register_book',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_5,
          _column_6,
          _column_3,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 studentRegisterBook = Shape2(
      source: i0.VersionedTable(
        entityName: 'student_register_book',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_8,
          _column_9,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 hiddenStudentTable = Shape3(
      source: i0.VersionedTable(
        entityName: 'hidden_student_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_10,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 studentViewDAOVersion = Shape4(
      source: i0.VersionedView(
        entityName: 'student_view_d_a_o_version',
        createViewStmt:
            'CREATE VIEW IF NOT EXISTS "student_view_d_a_o_version" ("id", "name", "age", "timestamp") AS SELECT "t0"."id" AS "id", "t0"."name" AS "name", "t0"."age" AS "age", "t0"."timestamp" AS "timestamp" FROM "student" "t0"',
        columns: [
          _column_0,
          _column_11,
          _column_2,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 hiddenStudentViewDAOVersion = Shape4(
      source: i0.VersionedView(
        entityName: 'hidden_student_view_d_a_o_version',
        createViewStmt:
            'CREATE VIEW IF NOT EXISTS "hidden_student_view_d_a_o_version" ("id", "name", "age", "timestamp") AS SELECT "t1"."id" AS "id", "t1"."name" AS "name", "t1"."age" AS "age", "t1"."timestamp" AS "timestamp" FROM "hidden_student_table" "t0" INNER JOIN "student" "t1" ON "t1"."id" = "t0"."hidden_id"',
        columns: [
          _column_0,
          _column_11,
          _column_2,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 registerBookViewDAOVersion = Shape5(
      source: i0.VersionedView(
        entityName: 'register_book_view_d_a_o_version',
        createViewStmt:
            'CREATE VIEW IF NOT EXISTS "register_book_view_d_a_o_version" ("id", "action", "hour_created_at", "created_at", "type", "name", "age") AS SELECT "t1"."id" AS "id", "t1"."action" AS "action", STRFTIME(\'%H:%M\', "t1"."created_at", \'unixepoch\') AS "hour_created_at", "t1"."created_at" AS "created_at", "t1"."type" AS "type", "t0"."name" AS "name", "t0"."age" AS "age" FROM "student_register_book" "t2" INNER JOIN "student" "t0" ON "t0"."id" = "t2"."student" INNER JOIN "register_book" "t1" ON "t1"."id" = "t2"."register_book"',
        columns: [
          _column_0,
          _column_12,
          _column_13,
          _column_7,
          _column_6,
          _column_11,
          _column_2,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index name = i1.Index('name', 'CREATE INDEX name ON student (name)');
  final i1.Index age = i1.Index('age', 'CREATE INDEX age ON student (age)');
  final i1.Index timestamp =
      i1.Index('timestamp', 'CREATE INDEX timestamp ON student (timestamp)');
  final i1.Index createdAt = i1.Index(
      'created_at', 'CREATE INDEX created_at ON register_book (created_at)');
  final i1.Index type =
      i1.Index('type', 'CREATE INDEX type ON register_book (type)');
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get age =>
      columnsByName['age']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get notes =>
      columnsByName['notes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 2, maxTextLength: 50),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_2(String aliasedName) =>
    i1.GeneratedColumn<int>('age', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('notes', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_4(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('timestamp', aliasedName, false,
        type: i1.DriftSqlType.dateTime);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get action =>
      columnsByName['action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get type =>
      columnsByName['type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get notes =>
      columnsByName['notes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('action', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
          minTextLength: 2,
        ),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_6(String aliasedName) =>
    i1.GeneratedColumn<int>('type', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<DateTime> _column_7(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_at', aliasedName, false,
        type: i1.DriftSqlType.dateTime);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get student =>
      columnsByName['student']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get registerBook =>
      columnsByName['register_book']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('student', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES student (id)'));
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('register_book', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES register_book (id)'));

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get hiddenId =>
      columnsByName['hidden_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('hidden_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES student (id)'));

class Shape4 extends i0.VersionedView {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get age =>
      columnsByName['age']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape5 extends i0.VersionedView {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get action =>
      columnsByName['action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get hourCreatedAt =>
      columnsByName['hour_created_at']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get type =>
      columnsByName['type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get age =>
      columnsByName['age']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('action', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>('hour_created_at', aliasedName, true,
        type: i1.DriftSqlType.string);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from2To3: from2To3,
    ));
